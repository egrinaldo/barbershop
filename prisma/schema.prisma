// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phone       String?
  avatar      String?
  googleId    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments Appointment[]
  
  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int      // duração em minutos
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments Appointment[]
  
  @@map("services")
}

model Professional {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  specialty   String?
  avatar      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments Appointment[]
  availabilities Availability[]
  
  @@map("professionals")
}

model Appointment {
  id             String   @id @default(cuid())
  date           DateTime
  startTime      String   // formato HH:mm
  endTime        String   // formato HH:mm
  status         String   @default("scheduled") // scheduled, completed, cancelled
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  serviceId      String
  service        Service  @relation(fields: [serviceId], references: [id])
  
  professionalId String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  
  @@map("appointments")
}

model Availability {
  id             String   @id @default(cuid())
  dayOfWeek      Int      // 0-6 (domingo a sábado)
  startTime      String   // formato HH:mm
  endTime        String   // formato HH:mm
  active         Boolean  @default(true)
  
  professionalId String
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  
  @@map("availabilities")
}